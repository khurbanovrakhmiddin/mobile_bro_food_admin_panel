import 'dart:async';import 'dart:convert';import 'package:firebase_auth/firebase_auth.dart' as firebase_auth;import 'package:firebase_auth_platform_interface/firebase_auth_platform_interface.dart';import 'package:flutter/widgets.dart';import 'package:mobile_bro_food_admin_panel/service/error_mesage-service.dart';import 'package:mobile_bro_food_admin_panel/service/sd_service.dart';import 'package:mobile_bro_food_admin_panel/service/util_service.dart';import '../model/user_model.dart';class Repost {  final firebase_auth.FirebaseAuth _firebaseAuth;  firebase_auth.FirebaseAuth get firebaseAuth => _firebaseAuth;  Repost({firebase_auth.FirebaseAuth? firebaseAuth}) :        _firebaseAuth = firebaseAuth ?? firebase_auth.FirebaseAuth            .instance;  var currenUser = User.empty;  Stream<User> get user {    return _firebaseAuth.authStateChanges().map((event) {      final user = event == null ? User.empty : event.toUser;      currenUser = user;      ///sssss      print('user');      print(User.empty);      print(user);      return user;    });  }   Future<firebase_auth.User?> signIn(BuildContext context, String email, String password) async {    try{      email = '${email.toLowerCase()}@mobilebro.uz';      firebase_auth.UserCredential userCredential = await      _firebaseAuth.signInWithEmailAndPassword(email: email, password: password);      return userCredential.user;    } on FirebaseAuthException catch (e) {      debugPrint(e.toString());      Utils.fireSnackBar(SignInFailure.fromCode        (e.code).toString(), context);    }catch(e) {      debugPrint(e.toString());      Utils.fireSnackBar(SignInFailure.fromCode(e.toString()).toString(),          context);    }    return null;  }   Future<firebase_auth.User?> signUp(BuildContext context, String name, String email, String password,String image) async {    try{      email = '${email.toLowerCase()}@mobilebro.uz';      firebase_auth.UserCredential userCredential = await _firebaseAuth          .createUserWithEmailAndPassword(email: email, password: password);      var user = userCredential.user;      await _firebaseAuth.currentUser?.updateDisplayName(name);      await user?.updateDisplayName(name);     await DBService.storeData( value: jsonEncode({'email':_firebaseAuth.currentUser!         .email,'password':password,'id':     _firebaseAuth.currentUser!.uid},));      if(image.isNotEmpty){        await user!.updatePhotoURL(image);      }      return user;    }    on FirebaseAuthException catch (e) {      debugPrint(e.toString());      Utils.fireSnackBar(SignUpFailure.fromCode        (e.code).toString(), context);  throw SignUpFailure.fromCode    (e.code);    }  }  Future<void> logOut() async {  try {    print('logOut');  await Future.wait([  _firebaseAuth.signOut(),      DBService.clearStorage(),  ]);  } catch (_) {  throw LogOutFailure();  }  }}extension on firebase_auth.User {  User get toUser {    return User(        id: uid, email: email, name: displayName, photo: photoURL);  }}