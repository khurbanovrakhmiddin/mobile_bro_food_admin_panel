import 'package:flutter/foundation.dart';import 'package:flutter/material.dart';import 'package:image_picker_web/image_picker_web.dart';import 'package:mobile_bro_food_admin_panel/model/food_model.dart';import 'package:mobile_bro_food_admin_panel/service/net_serivce.dart';import 'package:mobile_bro_food_admin_panel/service/rtdb_service.dart';import 'package:mobile_bro_food_admin_panel/service/util_service.dart';class MenuProvider extends ChangeNotifier{late TextEditingController _controllerName;late TextEditingController _controllerPrice;late TextEditingController _controllerAbout;String imgUrl = '';String? type;bool isAddOpen = false;MenuProvider(){   _controllerName =      TextEditingController (); _controllerPrice =  TextEditingController (); _controllerAbout=  TextEditingController ();}static List<String> menuItems =[  Type.set.name,  Type.lavash.name,  Type.shaurma.name,  Type.donar.name,  Type.xaggi.name,  Type.burgers.name,  Type.hotDog.name,  Type.garniri.name,  Type.souse.name,  Type.napitk.name,  Type.deserts.name,  Type.morojonoe.name,];final List<DropdownMenuItem<String>> dropDownMenuItems = menuItems    .map(      (String value) => DropdownMenuItem<String>(    value: value,    child: Text(value),  ),).toList();TextEditingController get controllerName => _controllerName;  Uint8List? image;bool isLoading = true;  List<Foods> list = [];Future<void> get()async{    QueryMutation queryMutation = QueryMutation();    GraphQLClient client = graphQLConfiguration.clientToQuery();    QueryResult result = await client.query(      QueryOptions(        document: gql(queryMutation.menuList(20)),      ),    );    if (!result.hasException) {      for (var i = 0; i < result.data!["menu"].length; i++) {        setState(() {          users.add(Foods(            name:   result.data!["menu"][i]["name"] ?? "",            price:   result.data!["menu"][i]["price"] ?? "",            about:  result.data!["menu"][i]["about"] ?? "",            image:    result.data!["menu"][i]["image"] ?? "image name",            type:result.data!["menu"][i]["type"] ?? "no type",            have:result.data!["menu"][i]["have"] ?? true,          ));        });      }      print(users.length.toString());    } else {      print("Error: ${result.toString()}");    }  Map s =  await NetworkService.GET(NetworkService.API_MENU,{});  if(s.isNotEmpty){    if(list.length != listFromJson(s).length){      list =  listFromJson(s);    }  }else {    list = [];  }  isLoading = false;}void fileGalery(context) async{  late BuildContext alertContext;  await showDialog(      context: context,      builder: (builder) {        return SimpleDialog(          children: [            IconButton(              onPressed: (){                alertContext = builder;                _getImageFromFile(alertContext);              },              icon: Row(                children: const [                  Icon(Icons.file_copy),                  SizedBox(                    width: 10,                  ),                  Text("Use File")                ],              ),            )          ],        );      });  print('asdsd');  print(image.toString());  notifyListeners();}void _getImageFromFile(context) async { Uint8List? picker = await ImagePickerWeb.getImageAsBytes();  if (picker != null) {    image = picker;  }  Navigator.of(context).pop();}@overridevoid dispose() {  _controllerName.dispose();  _controllerPrice.dispose();  _controllerAbout.dispose();  list.clear();  super.dispose();}void dropType(String? value) {  if (value != null) {    type = value;  }  notifyListeners();}Future<void> add(BuildContext context) async {  bool result = check(context);  if(!result){    return;  }  imgUrl =  await StoreRepos.uploadImage(image!);  Foods food = Foods(name: _controllerName.text.trim(), image:imgUrl,  price: _controllerPrice.text.trim(),      about:      _controllerName.text.trim(), type:  type!,have:true); await NetworkService.POST(NetworkService.API_CREATE_MENU, food.toJson    ());  clearAllDetail();  notifyListeners();}void closeOrOpen(){  isAddOpen = !isAddOpen;  notifyListeners();}bool check(context){  String name = _controllerName.text.trim();  String price = _controllerPrice.text.trim();  String about =_controllerAbout.text.trim();  bool imageURL = image != null;  bool tip = type != null;  print(name);  if (name.isEmpty) {    Utils.fireSnackBar("Name is Empty", context);    return false;  }  if (price.isEmpty) {    Utils.fireSnackBar("Price is Empty",  context);    return false;  }  if (about.isEmpty) {    Utils.fireSnackBar("About is Empty",  context);    return false;  }  if (!imageURL) {    Utils.fireSnackBar("Image is Empty",  context);    return false;  }  if (!tip) {    Utils.fireSnackBar("Type is Empty",  context);    return false;  }  return true;}void clearAllDetail(){  _controllerName.clear();  _controllerPrice.clear();  _controllerAbout.clear();  image =null;  type = null;  notifyListeners();}TextEditingController get controllerPrice => _controllerPrice;TextEditingController get controllerAbout => _controllerAbout;}