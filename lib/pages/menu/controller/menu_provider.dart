import 'dart:math';import 'package:flutter/foundation.dart';import 'package:flutter/material.dart';import 'package:graphql_flutter/graphql_flutter.dart';import 'package:image_picker_web/image_picker_web.dart';import 'package:mobile_bro_food_admin_panel/model/food_model.dart';import 'package:mobile_bro_food_admin_panel/pages/detail/detail_page.dart';import 'package:mobile_bro_food_admin_panel/repository/graphql_repost.dart';import 'package:mobile_bro_food_admin_panel/repository/query_mutation.dart';import 'package:mobile_bro_food_admin_panel/service/net_serivce.dart';import 'package:mobile_bro_food_admin_panel/service/rtdb_service.dart';import 'package:mobile_bro_food_admin_panel/service/util_service.dart';class MenuProvider extends ChangeNotifier{  late TextEditingController _controllerName;  late TextEditingController _controllerPrice;  late TextEditingController _controllerAbout;  GraphQLConfiguration graphQLConfiguration = GraphQLConfiguration();  Foods? openBy;  int? index;  String imgUrl = '';  String? type;  bool isEdit = false;  bool isAddOpen = false;  bool deleteProgression = false;  MenuProvider(){    _controllerName =        TextEditingController ();    _controllerPrice =        TextEditingController ();    _controllerAbout=        TextEditingController ();  }  static List<String> menuItems =[    Type.set.name,    Type.lavash.name,    Type.shaurma.name,    Type.donar.name,    Type.xaggi.name,    Type.burgers.name,    Type.hotDog.name,    Type.garniri.name,    Type.souse.name,    Type.napitk.name,    Type.deserts.name,    Type.morojonoe.name,  ];  final List<DropdownMenuItem<String>> dropDownMenuItems = menuItems      .map(        (String value) => DropdownMenuItem<String>(      value: value,      child: Text(value),    ),  ).toList();  TextEditingController get controllerName => _controllerName;  Uint8List? image;  bool isLoading = true;  List<Foods> list = [];  Future<void> get()async{    QueryMutation queryMutation = QueryMutation();    GraphQLClient client = graphQLConfiguration.clientToQuery();    QueryResult result = await client.query(      QueryOptions(        document: gql(queryMutation.menuList()),      ),    );    if (!result.hasException) {      for (var item in result.data!["menu"]) {        list.add(Foods(          id: item["id"],          name:   item["name"] ?? "",          price:   item["price"] ?? 1,          about:  item["about"] ?? "",          image:    item["image"] ?? "image name",          type:item["type"] ?? "no type",          have:item["have"] ?? true,        ));      }      print(list.length.toString());    } else {      list = [];      print("Error: ${result.toString()}");    }    isLoading = false;    notifyListeners();  }  void fileGalery(context) async{    late BuildContext alertContext;    await showDialog(        context: context,        builder: (builder) {          return SimpleDialog(            children: [              IconButton(                onPressed: (){                  alertContext = builder;                  _getImageFromFile(alertContext);                },                icon: Row(                  children: const [                    Icon(Icons.file_copy),                    SizedBox(                      width: 10,                    ),                    Text("Use File")                  ],                ),              )            ],          );        });    notifyListeners();  }  void _getImageFromFile(context) async {    Uint8List? picker = await ImagePickerWeb.getImageAsBytes();    if (picker != null) {      image = picker;    }    Navigator.of(context).pop();  }  @override  void dispose() {    _controllerName.dispose();    _controllerPrice.dispose();    _controllerAbout.dispose();    list.clear();    super.dispose();  }  void dropType(String? value) {    if (value != null) {      type = value;    }    notifyListeners();  }  Future<void> add(BuildContext context) async {    isEdit =true;    notifyListeners();    bool result = check(context);    if(!result){      return;    }    String id = Random().nextInt(100000).toString();    imgUrl =    await StoreRepos.uploadImage(image!);    Foods food = Foods(id: id,name: _controllerName.text.trim(),        image:imgUrl,        price: _controllerPrice.text.trim(),        about:        _controllerName.text.trim(), type:        type!,have:true);    await  mutation(food);    isEdit =false;    notifyListeners();  }  void closeOrOpen(){    isAddOpen = !isAddOpen;    if(!isAddOpen){      openBy = null;    }    notifyListeners();  }  void open(int index){    openBy = list[index];    isAddOpen = true;    _controllerName.text = list[index].name;    _controllerPrice.text = list[index].price.toString();    _controllerAbout.text = list[index].about;    type = list[index].type;    imgUrl = list[index].image;    this.index = index;    notifyListeners();  }  Future mutation(Foods food)async{    QueryMutation queryMutation = QueryMutation();    print(      queryMutation.insertMenu(name: food.name, image: food.image,          price: food.price.toString(), about: food.about, have: food.have,          id: food.id, type: food.type),    );    GraphQLClient client = graphQLConfiguration.clientToQuery();    QueryResult res = await client.mutate(        MutationOptions(          document: gql(            queryMutation.insertMenu(name: food.name, image: food                .image, price: food.price.toString(), about: food.about, have:            food.have, id: food.id, type: food.type),          ),        )    );    if (!res.hasException) {      clearAllDetail();    } else {      print(res.exception);    }  }  Future<void> update(Foods foods,int index)async {    isEdit =true;    notifyListeners();    bool haveStatus= !foods.have;    Foods food = Foods(id: foods.id,        name: foods.name,        image:        foods.image,        price: foods.price,        about: foods.about,        type: foods.type,        have:haveStatus);    QueryMutation queryMutation = QueryMutation();    GraphQLClient client = graphQLConfiguration.clientToQuery();    QueryResult res = await client.mutate(        MutationOptions(          document: gql(            queryMutation.updateMenu(name: food.name,                image: food.image,                price: food                    .price.toString(),                about: food.about,                have:haveStatus,                id: food.id,                type:                food.type),          ),        )    );    if (!res.hasException) {} else {      print(res.exception);    }    list[index] = food;    isEdit =false;    notifyListeners();  }  Future<void> updateItem()async {    isEdit =true;    notifyListeners();    String id = openBy!.id;    if(image != null){      imgUrl =  await StoreRepos.uploadImage(image!);    }else{      imgUrl = openBy!.image;    }    Foods food = Foods(id: id,name: _controllerName.text.trim(),        image:imgUrl,        price: _controllerPrice.text.trim(),        about:        _controllerName.text.trim(), type:        type!,have:true);    QueryMutation queryMutation = QueryMutation();    GraphQLClient client = graphQLConfiguration.clientToQuery();    QueryResult res = await client.mutate(        MutationOptions(          document: gql(            queryMutation.updateMenu(name: food.name,                image: food.image,                price: food                    .price.toString(),                about: food.about,                have:food.have,                id: food.id,                type:                food.type),          ),        )    );    if (!res.hasException) {      list[index!] = food;    } else {      print(res.exception);    }    isEdit =false;    notifyListeners();  }  Future<void> deleteMenu(Foods foods,int index)async{    deleteProgression =true;    notifyListeners();    String id = foods.id;    QueryMutation queryMutation = QueryMutation();    GraphQLClient client = graphQLConfiguration.clientToQuery();    QueryResult res = await client.mutate(        MutationOptions(          document: gql(            queryMutation.menuDelete(id: id),          ),        )    );    if (!res.hasException) {      list.removeAt(index);    } else {      print(res.exception);    }    deleteProgression =false;    notifyListeners();  }  bool check(context){    String name = _controllerName.text.trim();    String price = _controllerPrice.text.trim();    String about =_controllerAbout.text.trim();    bool imageURL =openBy != null?true: image != null;    bool tip = type != null;    print(name);    if (name.isEmpty) {      Utils.fireSnackBar("Name is Empty", context);      return false;    }    if (price.isEmpty) {      Utils.fireSnackBar("Price is Empty",  context);      return false;    }    if (about.isEmpty) {      Utils.fireSnackBar("About is Empty",  context);      return false;    }    if (!imageURL) {      Utils.fireSnackBar("Image is Empty",  context);      return false;    }    if (!tip) {      Utils.fireSnackBar("Type is Empty",  context);      return false;    }    return true;  }  void clearAllDetail(){    _controllerName.clear();    _controllerPrice.clear();    _controllerAbout.clear();    image =null;    type = null;    notifyListeners();  }  TextEditingController get controllerPrice => _controllerPrice;  TextEditingController get controllerAbout => _controllerAbout;}