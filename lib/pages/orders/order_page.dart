import 'package:flutter/material.dart';import 'package:mobile_bro_food_admin_panel/configs/text_configs.dart';import 'package:mobile_bro_food_admin_panel/model/Order_model.dart';import 'package:mobile_bro_food_admin_panel/model/food_model.dart';import 'package:mobile_bro_food_admin_panel/pages/orders/controller/order_provider.dart';import 'package:provider/provider.dart';class OrderPage extends StatelessWidget {  const OrderPage({Key? key}) : super(key: key);  @override  Widget build(BuildContext context) {    return StreamProvider<List<OrderModel>>(      create: (context) => OrderProvider().order,      initialData: [],      child: _homePage(),    );  }}class _homePage extends StatelessWidget {  @override  Widget build(BuildContext context) {    return Consumer<List<OrderModel>>(        builder: (context, provider, __) {      if (provider.isEmpty) {        return const Center(          child: Text(empty),        );      }      return ListView.builder(          itemCount: provider.length,          itemBuilder: (context, i) {            print(provider.length);            OrderModel order = provider[i];            List<Foods> foods = provider[i].foods;            print('Order ${provider[i].foods.length}');            print('foods.length ${provider[i].foods.length}');            List<Widget> f = List.generate(                foods.length,                (index) => Column(                      children: [                        Text(foods[index].id),                        Text(foods[index].id),                        Text(foods[index].name),                        Text(foods[index].name),                        Image.network(                          foods[index].image,                          height: 100,                          width: 100,                        ),                        Text(foods[index].count.toString()),                      ],                    ));            return Card(                child: ExpansionTile(              title: Row(                mainAxisAlignment: MainAxisAlignment.spaceAround,                children: [                  Text("#${order.orderId}"),                  Icon(                      order.ready                          ? Icons.check_circle_outline                          : Icons.sync,                      color: Colors.green),                  ElevatedButton(                      onPressed: () {},                      child: const Text(sendToCurer)),                ],              ),              children: [                Text(order.time.toString()),                ExpansionTile(                  title: Text(addressDelivery),                  children: [                    item(doorCode, order.address.floorCode),                    item(                        addressDelivery, order.address.fromGeocoding),                    item(float, order.address.float),                    item(homeN, order.address.kvNumber),                    item(homeA, order.address.home),                  ],                ),                ExpansionTile(                  subtitle:Text(order.cost),                  title: Text(food),                  children: List.generate(foods.length,                      (index) => FoodsMenu(foods: foods[index])),                ),              ],            ));          });    });  }  Row item(String name, String item) {    return Row(      children: [Text(name), const Spacer(), Text(item), Spacer()],    );  }}class FoodsMenu extends StatelessWidget {  final Foods foods;  const FoodsMenu({Key? key, required this.foods}) : super(key: key);  @override  Widget build(BuildContext context) {    return Column(      crossAxisAlignment: CrossAxisAlignment.start,      children: [        Row(          children: [            const Text(foodsID),            const SizedBox(width: 20,),            Text(foods.id),          ],        ),        Row(          children: [            const Text(foodsName),            const SizedBox(width: 20,),            Text(foods.name),          ],        ),        Row(          children: [            const Text(foodsCount),            const SizedBox(width: 20,),            Text(foods.count.toString()),          ],        ),        Image.network(          foods.image,          height: 100,          width: 100,        ),        const SizedBox(          height: 20,        ),      ],    );  }}